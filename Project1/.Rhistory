facet_grid(~variable)
ggplot(data, aes(x=value)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_grid(~variable, scales = 'free')
ggplot(data, aes(x=value)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap(~variable, scales = 'free')
ggplot(data, aes(x=value)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap(~column, scales = 'free')
ggplot(data, aes(x=value)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap(~value, scales = 'free')
ggplot(data, aes(x=value)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap( scales = 'free')
ggplot(data, aes(x=value)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap(facets = data, scales = 'free')
ggplot(data, aes(x=value)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap(~value, scales = 'free')
ggplot(data, aes(x=value)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap(~values, scales = 'free')
ggplot(data, aes(x=value)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap(~target_wins, scales = 'free')
ggplot(data, aes()) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap(~target_wins, scales = 'free')
ggplot(data, aes()) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap(~value, scales = 'free')
ggplot(data, aes()) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap(~variable, scales = 'free')
ggplot(data, aes()) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap(~variable, scales = 'free')
#ggplot(data, aes()) + geom_histogram(binwidth=.5, colour="black", fill="white") +
#facet_wrap(~variable, scales = 'free')
names(data)
ggplot(data, aes()) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap(~index, scales = 'free')
ggplot(data, aes()) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap(~"index", scales = 'free')
ggplot(data, aes(x=value)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap(~"index", scales = 'free')
ggplot(data, aes(x=values)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap(~"index", scales = 'free')
ggplot(data, aes(x=index)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap(~"index", scales = 'free')
ggplot(data, aes(x="index")) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap(~"index", scales = 'free')
ggplot(data, aes(x=count)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap(~"index", scales = 'free')
ggplot(data, aes(x=value)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap(~"index", scales = 'free')
ggplot(data, aes(x = target_wins ,y=value)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_wrap(~"index", scales = 'free')
#ggplot(data, aes(x = target_wins ,y=value)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
#facet_wrap(~"index", scales = 'free')
data %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(kableExtra)
library(corrplot)
library(tidyverse)
#ggplot(data, aes(x = target_wins ,y=value)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
#facet_wrap(~"index", scales = 'free')
data %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
#ggplot(data, aes(x = target_wins ,y=value)) + geom_histogram() +
#facet_wrap(~"index", scales = 'free')
data %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(binwidth=.5, colour="black", fill="white")
data %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(binwidth=.5, colour="white", fill="white") +
geom_density(alpha=.2, fill="#FF6666")
data[-c(1)] %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(binwidth=.5, colour="white") +
geom_density(alpha=.2, fill="#FF6666")
data[-c(1)] %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(binwidth=.5, colour="viridis") +
geom_density(alpha=.2, fill="#FF6666")
data[-c(1)] %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(binwidth=.5) +
geom_density(alpha=.2, fill="#FF6666") +
scale_color_viridis_d(option='D')
data[-c(1)] %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(binwidth=.5) +
geom_density() +
scale_color_viridis_d(option='D')
install.packages("viridis")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(kableExtra)
library(corrplot)
library(tidyverse)
library(viridis)
data[-c(1)] %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(binwidth=.3) +
geom_density() +
scale_color_viridis_d(option='D')
data[-c(1)] %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(binwidth=1, color=viridis(10)) +
scale_color_viridis_d(option='D')
data[-c(1)] %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(binwidth=1) +
scale_color_viridis(option='D')
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
data_no_index <- data[-c(1)]
#data.cor = cor(data_no_index, method=c("spearman"))
cor_matrix <- rcorr(as.matrix(data_no_index))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(kableExtra)
library(corrplot)
library(tidyverse)
library(Hmisc)
data_no_index <- data[-c(1)]
#data.cor = cor(data_no_index, method=c("spearman"))
cor_matrix <- rcorr(as.matrix(data_no_index))
flattenCorrMatrix(cor_matrix$r, cor_matrix$P)
data_no_index <- data[-c("Index")]
data_no_index <- data[-c(1, 11)]
#data.cor = cor(data_no_index, method=c("spearman"))
cor_matrix <- rcorr(as.matrix(data_no_index))
flattenCorrMatrix(cor_matrix$r, cor_matrix$P)
#eliminate TEAM_BATTING_HBP & INDEX from data frame
data_no_index <- data[-c(1)]
cor_matrix <- rcorr(as.matrix(data_no_index))
flattenCorrMatrix(cor_matrix$r, cor_matrix$P)
chart.Correlation(data[-c(1)], histograme=TRUE, pch=19)
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
library(corrplot)
library(tidyverse)
library(Hmisc)
library(PerformanceAnalytics)
chart.Correlation(data[-c(1)], histograme=TRUE, pch=19)
chart.Correlation(data[-c(1)], histograme=TRUE, pch="+")
chart.Correlation(data[-c(1)], histograme=TRUE, method= "pearson")
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
library(corrplot)
library(tidyverse)
library(Hmisc)
library(PerformanceAnalytics)
library(corrplot)
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
library(corrplot)
library(tidyverse)
library(Hmisc)
library(PerformanceAnalytics)
library(corrplot)
max_obs <- 2276
batting_so_na <- ((102/max_obs) * 100)
baserun_sb_na <- (131/max_obs) * 100
baserun_cs_na <- (772/max_obs) * 100
batting_hbp_na <- (2085/max_obs) * 100
pitching_so_na <- (102/max_obs) * 100
fielding_dp_na <- (286/max_obs) * 100
df_percent_na <- data.frame(Columns_w_NA = c("team_batting_so", "team_baserun_sb", "team_baserun_cs", "team_batting_hbp", "team_pitching_so", "team_fielding_dp"), Percent_NA = c(batting_so_na, baserun_sb_na, baserun_cs_na, batting_hbp_na, pitching_so_na, fielding_dp_na))
as_tibble(df_percent_na)
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(tidyverse)
library(Hmisc)
library(PerformanceAnalytics)
library(corrplot)
corrplot(cor(data[c(-1)], method="number", type="full"))
corrplot(cor(data[c(-1)]), method="number", type="full")
corrplot(cor(data[c(-1)]), method="shade", type="full")
corrplot(cor(data[c(-1)]), method="pie", type="full")
corrplot(cor(data[c(-1)]), method="circle", type="full")
corrplot(cor(data[c(-1)]), method="circle")
corrplot(data[c(-1)], method="circle")
#eliminate INDEX from data frame
data_no_index <- data[-c(1)]
cor_matrix <- rcorr(as.matrix(data_no_index))
flattenCorrMatrix(cor_matrix$r, cor_matrix$P)
data.corr <- cor(data)
data.corr <- cor(data)
data.corr
data.corr <- cor(data)
corrplot(data.corr, method = "square")
data.corr <- cor(data)
corrplot(data.corr, method = "number")
data.corr <- cor(data)
corrplot(data.corr, method = "shade")
data.corr <- cor(data[-c(1)])
corrplot(data.corr, method = "shade")
data.corr <- cor(data[-c(1)])
corrplot.mixed(data.corr, method = "shade")
data.corr <- cor(data[-c(1)])
corrplot.mixed(data.corr)
data.corr <- cor(data[-c(1)])
corrplot.mixed(data.corr, number.cex = .25)
data.corr <- cor(data[-c(1)])
corrplot.mixed(data.corr, number.cex = .5)
data.corr <- cor(data[-c(1)])
corrplot(data.corr, type = "lower")
data.corr <- cor(data[-c(1)])
corrplot(data.corr, is.corr = TRUE, type = "lower")
data.corr <- cor(data[-c(1)])
corrplot(data.corr, is.corr = FALSE, type = "lower")
data.corr <- cor(data[-c(1)])
corrplot(data.corr, is.corr = FALSE, type = "lower")
data.corr <- cor(data[-c(1)])
corrplot(data.corr, is.corr = TRUE, type = "lower")
data.corr <- cor(data[-c(1)], use="pairwise.complete.obs")
corrplot(data.corr, type = "lower")
chart.Correlation(data[-c(1)], histograme=TRUE, method= "pearson", use="pairwise.complete.obs")
data.corr <- cor(data[-c(1)], use="pairwise.complete.obs")
corrplot(data.corr, type = "lower", method="square")
#pairwise.complete.obs ignores NA values and computes correlation on complete observations
#we might have to run these corrplots again after we handle the NA values
chart.Correlation(train_data[-c(1)], histograme=TRUE, method= "pearson", use="pairwise.complete.obs")
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(tidyverse)
library(Hmisc)
library(PerformanceAnalytics)
library(corrplot)
#Import data
# I replaced the variable name data with train_data since we'll have a test data
train_data <- read.csv("https://raw.githubusercontent.com/aaitelmouden/DATA621/master/Project1/moneyball-training-data.csv")
glimpse(train_data)
max_obs <- 2276
batting_so_na <- ((102/max_obs) * 100)
baserun_sb_na <- (131/max_obs) * 100
baserun_cs_na <- (772/max_obs) * 100
batting_hbp_na <- (2085/max_obs) * 100
pitching_so_na <- (102/max_obs) * 100
fielding_dp_na <- (286/max_obs) * 100
df_percent_na <- data.frame(Columns_w_NA = c("team_batting_so", "team_baserun_sb", "team_baserun_cs", "team_batting_hbp", "team_pitching_so", "team_fielding_dp"), Percent_NA = c(batting_so_na, baserun_sb_na, baserun_cs_na, batting_hbp_na, pitching_so_na, fielding_dp_na))
as_tibble(df_percent_na)
#Here I am adding another way to show missing data library VIM, so we can add only the plot to our report
# reference https://datasciencebeginners.com/2018/11/07/visualization-of-imputed-values-using-vim/
mice_plot <- aggr(train_data, col=c('lightblue','red'),numbers=TRUE, sortVars=TRUE,labels=names(train_data), cex.axis=0.7,gap=3, ylab=c("Missing data","Pattern"), oma = c(10,5,5,3))
# Here is an example how to use the package https://naniar.njtierney.com/articles/naniar-visualisation.html
library(naniar)
install.packages("naniar")
# Here is an example how to use the package https://naniar.njtierney.com/articles/naniar-visualisation.html
library(naniar)
par(mfrow=c(1,2))
gg_miss_upset(train_data,
nsets = 5,
nintersects = NA)
gg_miss_case(train_data)+
theme_classic()
#eliminate INDEX from data frame
data_no_index <- train_data[-c(1)]
cor_matrix <- rcorr(as.matrix(data_no_index))
flattenCorrMatrix(cor_matrix$r, cor_matrix$P)
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
#pairwise.complete.obs ignores NA values and computes correlation on complete observations
#we might have to run these corrplots again after we handle the NA values
chart.Correlation(train_data[-c(1)], histograme=TRUE, method= "pearson", use="pairwise.complete.obs")
ggplot(stack(train_data[,-1]), aes(x = ind, y = values, fill=ind)) +
geom_boxplot(outlier.colour = "red",  outlier.alpha=.4) +
coord_cartesian(ylim = c(0, 1000)) +
theme_classic()+
theme(axis.text.x=element_text(angle=45, hjust=1))
install.packages("VIM")
# Here is an example how to use the package https://naniar.njtierney.com/articles/naniar-visualisation.html
library(naniar)
par(mfrow=c(1,2))
gg_miss_upset(train_data,
nsets = 5,
nintersects = NA)
gg_miss_case(train_data)+
theme_classic()
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(tidyverse)
library(Hmisc)
library(PerformanceAnalytics)
library(corrplot)
library(VIM)
install.packages("mice")
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(tidyverse)
library(Hmisc)
library(PerformanceAnalytics)
library(corrplot)
library(mice)
imputeData <- mice(train_data, m=6, defaultMethod = 'pmm')
imputeData <- mice(train_data, m=6, defaultMethod = 'pmm')
summary(imputeData)
imputeData <- mice(train_data[-c(1)], m=6, defaultMethod = 'pmm')
summary(imputeData)
summary(imputeData)
imputeData <- mice(train_data[-c(1)], m=5, defaultMethod = 'pmm')
summary(imputeData)
md.pattern(train_data(-c(1)))
train_data[-c(1)] %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(binwidth=1)
md.pattern(train_data([-c(1)]))
md.pattern(train_data[-c(1)])
train <- train[-10]
md.pattern(train_data[-c(1, 10)])
train_data_impute <- subset(data, select = -c(index))
train_data_impute <- subset(train_data, select = -c(Index))
train_data_impute <- subset(train_data, select = -c(INDEX))
train_data_impute <- subset(train_data, select = -c(INDEX, TEAM_BATTING_HBP))
summary(train_data_impute)
train_data_impute <- select(train_data, -c(INDEX, TEAM_BATTING_HBP))
imp_mult <- mice(train_data_impute, m=5, method = "pmm")
td_impute <- complete(imp_mult)
install.packages("naniar")
install.packages("naniar")
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(tidyverse)
library(Hmisc)
library(PerformanceAnalytics)
library(corrplot)
library(mice)
head(td_impute)
head(td_impute)
summary(td_impute)
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(tidyverse)
library(Hmisc)
library(PerformanceAnalytics)
library(corrplot)
train_data <- train_data[-10]
train_data_impute <- select(train_data, -c(INDEX, TEAM_BATTING_HBP))
imp_mult <- mice(train_data_impute, m=5, method = "pmm")
td_impute <- complete(imp_mult)
head(td_impute)
summary(td_impute)
install.packages("bnstruct")
library(bnstruct)
#documentation on knn.impute: https://www.rdocumentation.org/packages/bnstruct/versions/1.0.8/topics/knn.impute
#article: https://rstatisticsblog.com/data-science-in-action/data-preprocessing/quick-tutorial-how-to-identify-and-impute-missing-values-in-r/
library(bnstruct)
knn_data <- knn.impute(train_data_impute, cat.var = 1:ncol(train_data_impute), to.impute = 1:nrow(train_data_impute),
using = 1:nrow(train_data_impute))
#documentation on knn.impute: https://www.rdocumentation.org/packages/bnstruct/versions/1.0.8/topics/knn.impute
#article: https://rstatisticsblog.com/data-science-in-action/data-preprocessing/quick-tutorial-how-to-identify-and-impute-missing-values-in-r/
library(bnstruct)
knn_data <- knn.impute(train_data_impute, k=5, cat.var = 1:ncol(train_data_impute), to.impute = 1:nrow(train_data_impute),
using = 1:nrow(train_data_impute))
#documentation on knn.impute: https://www.rdocumentation.org/packages/bnstruct/versions/1.0.8/topics/knn.impute
#article: https://rstatisticsblog.com/data-science-in-action/data-preprocessing/quick-tutorial-how-to-identify-and-impute-missing-values-in-r/
library(bnstruct)
knn.impute(train_data_impute, k=5, cat.var = 1:ncol(train_data_impute), to.impute = 1:nrow(train_data_impute),
using = 1:nrow(train_data_impute))
#documentation on knn.impute: https://www.rdocumentation.org/packages/bnstruct/versions/1.0.8/topics/knn.impute
#article: https://rstatisticsblog.com/data-science-in-action/data-preprocessing/quick-tutorial-how-to-identify-and-impute-missing-values-in-r/
library(bnstruct)
knn.impute(train_data, k=5, cat.var = 1:ncol(train_data), to.impute = 1:nrow(train_data), using = 1:nrow(train_data))
library(gt)
install.packages("gt")
install.packages("gt")
install.packages("gt")
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(tidyverse)
install.packages(c("corrr", "gtsummary"))
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(tidyverse)
library(Hmisc)
library(PerformanceAnalytics)
library(corrplot)
#Import data
# I replaced the variable name data with train_data since we'll have a test data
train_data <- read.csv("https://raw.githubusercontent.com/aaitelmouden/DATA621/master/Project1/moneyball-training-data.csv")
glimpse(train_data)
library(tidyverse)
library(gtsummary)
install.packages("gtsummary")
library(gtsummary)
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(tidyverse)
library(Hmisc)
library(PerformanceAnalytics)
library(corrplot)
library(gtsummary)
library(gtsummary)
#library(gtsummary)
wins <- train_data %>% select(TARGET_WINS, TEAM_BATTING_H, TEAM_BATTING_2B, TEAM_BATTING_3B, TEAM_BATTING_HR, TEAM_BATTING_BB, TEAM_BATTING_HBP, TEAM_BATTING_SO, TEAM_BASERUN_SB, TEAM_BASERUN_CS, TEAM_FIELDING_E, TEAM_FIELDING_DP, TEAM_PITCHING_BB, TEAM_PITCHING_SO, TEAM_FIELDING_E, TEAM_FIELDING_DP)
table1 <- tbl_summary(wins,
statistic = list(all_continuous() ~ "{mean} ({sd}) {median} {min} {max}"), missing = "no")
library(gtsummary)
# Layout to split the screen
layout(mat = matrix(c(1,2),2,1, byrow=TRUE),  height = c(1,8))
# Draw the boxplot and the histogram
par(mar=c(0, 3.1, 1.1, 2.1))
boxplot(train_data$TARGET_WINS ,main="Figure 2 : Distribution and Probability Plot for TARGET_WINS",cex.main=1, horizontal=TRUE , ylim=c(0,150), xaxt="n" , col=rgb(0.8,0.8,0,0.5) , frame=F)
par(mar=c(4, 3.1, 1.1, 2.1))
hist(train_data$TARGET_WINS , breaks=40 , col=rgb(0.2,0.8,0.5,0.5) , border=F , main="" , xlab="TARGET WINS", xlim=c(0,150))
qqnorm(train_data$TARGET_WINS, pch = 1, frame = FALSE)
qqline(train_data$TARGET_WINS, col = "steelblue", lwd = 2)
library(gt)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(Hmisc)
library(PerformanceAnalytics)
library(corrplot)
library(gt)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(Hmisc)
library(PerformanceAnalytics)
library(corrplot)
library(gt)
.libPaths()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(Hmisc)
library(PerformanceAnalytics)
library(corrplot)
library(gt)
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
library(htmltools)
install.packages(c("fivethirtyeight", "Hmisc", "htmltools", "kableExtra", "pracma", "shiny"))
install.packages(c("fivethirtyeight", "Hmisc", "htmltools", "kableExtra", "pracma", "shiny"))
install.packages(c("fivethirtyeight", "Hmisc", "htmltools", "kableExtra", "pracma", "shiny"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(Hmisc)
library(PerformanceAnalytics)
library(corrplot)
library(gt)
library(htmltools)
remove.packages("htmltools", lib="~/R/win-library/3.6")
install.packages("htmltools")
